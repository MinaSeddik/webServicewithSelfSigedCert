package com.example.springbootproject.repository.impl;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@Repository
@Slf4j
public class MyTestRepository {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public int getAllItems() {
        List<Integer> list = jdbcTemplate.query("select * from atm;", new PreparedStatementSetter(){

            @Override
            public void setValues(PreparedStatement preparedStatement) throws SQLException {
//                preparedStatement.setInt(1, 1);

                // setFetchSize
                // set fetch size
//                preparedStatement.setFetchSize(Integer.MIN_VALUE); // it will fetch row by row
                /*
                The MySQL JDBC driver always fetches all rows, unless the fetch size is set to Integer.MIN_VALUE.
                 */
//                int fetchSize = preparedStatement.getFetchSize();
//                System.out.println("fetchSize = " + fetchSize);

                // setMaxRows
                /*
                Sets the limit for the maximum number of rows that any ResultSet object generated by this Statement object can contain to the given number. If the limit is exceeded, the excess rows are silently dropped.
                 */
//                preparedStatement.setMaxRows(1);

            }
        }, new ResultSetExtractor<List<Integer>>(){

            @Override
            public List<Integer> extractData(ResultSet resultSet) throws SQLException, DataAccessException {
                log.info("resultSet.getFetchSize(): {}", resultSet.getFetchSize());

                List<Integer> list = new ArrayList<>();

                while (resultSet.next()) {
                    long id = resultSet.getLong("id");
                    log.info("Id: {}", id);

                    String name = resultSet.getString("first_name");
                    log.info("Name: {}", name);

                    list.add((int)id);

                }
                return list;
            }
        });

//        List<Map<String, Object>> items = jdbcTemplate.queryForList("select * from atm");

        return list.size();
    }

}
