DROP DATABASE IF EXISTS my_saas_subscription;

CREATE DATABASE my_saas_subscription;

USE my_saas_subscription;

CREATE TABLE user
(
user_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(30) NOT NULL,
last_name VARCHAR(30) DEFAULT NULL,
email VARCHAR(50) DEFAULT NULL,
usename VARCHAR(50) NOT NULL,
password VARCHAR(50) NOT NULL,
notes TEXT DEFAULT NULL,
photo BLOB DEFAULT NULL,
confirmation_code VARCHAR(36) NOT NULL,
conformation_time DATETIME COMMENT('When the registration/confirmation was completed.'),
active TINYINT(1) NOT NULL DEFAULT '1',
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE user_group_type
(
group_type_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
group_type VARCHAR(50) NOT NULL UNIQUE COMMENT('example: Single-user group, Standard group ... ')
is_admin TINYINT(1) NOT NULL DEFAULT '0',
members_min INT UNSIGNED NOT NULL,
members_max INT UNSIGNED NOT NULL,
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE group
(
group_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(30) NOT NULL,
group_type_id INT UNSIGNED NOT NULL,
notes TEXT DEFAULT NULL,
active TINYINT(1) NOT NULL DEFAULT '1',
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE user_group
(
group_id INT UNSIGNED NOT NULL,
user_id INT UNSIGNED NOT NULL,
is_admin TINYINT(1) NOT NULL DEFAULT '0',
time_added DATETIME NOT NULL,
time_removed DATETIME DEFAULT NULL,
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE software
(
software_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(100) NOT NULL UNIQUE,
access_url VARCHAR(1024) NOT NULL,
details TEXT,
active TINYINT(1) NOT NULL DEFAULT '1',
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE plan
(
plan_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
plan_name VARCHAR(100) NOT NULL UNIQUE COMMENT('example: Basic, Standard, Premium ... '),
software_id INT UNSIGNED NOT NULL,
user_group_type_id INT UNSIGNED NOT NULL,
price DECIMAL(10, 2) NOT NULL,
description VARCHAR(150) DEFAULT '',
details TEXT,
active TINYINT(1) NOT NULL DEFAULT '1',
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE option
(
option_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
option_name VARCHAR(100) NOT NULL UNIQUE COMMENT('options enebled per group'),
details TEXT,
active TINYINT(1) NOT NULL DEFAULT '1',
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE plan_option
(
plan_id INT UNSIGNED NOT NULL,
option_id INT UNSIGNED NOT NULL,
date_added DATETIME NOT NULL,
date_removed DATETIME DEFAULT NULL,
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE offer
(
offer_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
offer_name VARCHAR(100) NOT NULL,
effective_date DATE NOT NULL,
valid_untill DATE DEFAULT NULL,
discount_amount DECIMAL(10, 2) NOT NULL,
discount_type ENUM('FLAT', 'PERCENTAGE') NOT NULL DEFAULT 'FLAT',
details TEXT,
active TINYINT(1) NOT NULL DEFAULT '1',
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE plan_offer
(
offer_id INT UNSIGNED NOT NULL,
plan_id INT UNSIGNED NOT NULL,
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE subscription
(
subscription_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
--user_id INT UNSIGNED NOT NULL,      -- or group_id based on business requirements
user_group_id INT UNSIGNED NOT NULL,      -- or user_id based on business requirements

subscribe_date DATETIME DEFAULT NULL,
unsubscribe_date DATETIME DEFAULT NULL,

plan_id INT UNSIGNED NOT NULL,

trial_period_start_date DATE,
trial_period_end_date DATE,
subscribed_after_trial TINYINT(1) NOT NULL DEFAULT '1',

offer_id INT UNSIGNED,
offer_start_date DATE,
offer_end_date DATE,

created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE subscription_history
(
subscription_id INT UNSIGNED NOT NULL,
plan_id INT UNSIGNED NOT NULL,
effective_date DATE NOT NULL,
valid_untill DATE DEFAULT NULL,
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE invoice
(
invoice_id INT UNSIGNED NOT NULL,
user_id INT UNSIGNED NOT NULL,
subscription_history INT UNSIGNED NOT NULL,
total DECIMAL(10, 2),
sub_total DECIMAL(10, 2),
taxes DECIMAL(10, 2),
paid TINYINT(1) NOT NULL DEFAULT '0',
created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);






