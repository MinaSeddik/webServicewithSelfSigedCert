
DROP DATABASE IF EXISTS my_sakila;

CREATE DATABASE my_sakila;

USE my_sakila;

CREATE TABLE actor
(
actor_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
first_name VRACHAR(45) NOT NULL,
last_name VRACHAR(45) NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE table language
(
language_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VRACHAR(50) NOT NULL,
code VRACHAR(3) DEFAULT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE category
(
category_id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VRACHAR(50) NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE film
(
film_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
title VRACHAR(45) NOT NULL,
description TEXT,
release_year SMALLINT UNSIGNED NOT NULL,
language_id INTEGER UNSIGNED NOT NULL,
rental_duration TINYINT UNSIGNED NOT NULL,
rental_rate DECEMAL(10,2) NOT NULL,
length SMALLINT UNSIGNED NOT NULL,
replacement_cost DECEMAL(10,2) NOT NULL DEFAULT '19.99',
rating enum('G','PG','PG-13','R','NC-17') NOT NULL DEFAULT 'G',
special_features set('Trailers','Commentaries','Deleted Scenes','Behind the Scenes') DEFAULT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_film_language FOREIGN KEY (language_id) REFERENCES language(language_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE film_category
(
category_id INT UNSIGNED NOT NULL,
film_id INT UNSIGNED NOT NULL,
name VRACHAR(50) NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
PRIMARY KEY (category_id, film_id),
CONSTRAINT fk_film_category_category FOREIGN KEY (category) REFERENCES category(category_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_film_category_film FOREIGN KEY (film_id) REFERENCES film(film_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE film_actor
(
film_id INTEGER UNSIGNED NOT NULL,
actor_id INTEGER UNSIGNED NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
PRIMARY KEY (film_id, actor_id),
CONSTRAINT fk_fim_actor_film FOREIGN KEY (film_id) REFERENCES film(film_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_fim_actor_actor FOREIGN KEY (actor_id) REFERENCES actor(actor_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE country
(
country_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE city
(
city_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
country_id INTEGER UNSIGNED NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_city_country FOREIGN KEY (country_id) REFERENCES country(country_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE address
(
address_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
address VARCHAR(50) NOT NULL,
address2 VARCHAR(50) DEFAULT NULL,
city_id INTEGER UNSIGNED NOT NULL,
zip_code VRACHAR(10) DEFAULT NULL,
phone VARCHAR(20) NOT NULL,
location GEOMETRY NOT NULL SRID 4326,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_address_city FOREIGN KEY (city_id) REFERENCES city(city_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE staff
(
staff_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(45) NOT NULL,
last_name VARCHAR(45) NOT NULL,
address_id INTEGER UNSIGNED NOT NULL,
picture BLOB,
email VARCHAR(50) NOT NULL,
store_id INTEGER UNSIGNED NOT NULL,
active TINYINT(1) NOT NULL DEFAULT '1',
username VARCHAR(20) NOT NULL,
password VARCHAR(40) DEFAULT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_staff_address FOREIGN KEY (address_id) REFERENCES address(address_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_staff_store FOREIGN KEY (store_id) REFERENCES store(store_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE store
(
store_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(100) DEFAULT NULL,
manager_staff_id INTEGER UNSIGNED NOT NULL,
address_id INTEGER UNSIGNED NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_store_staff FOREIGN KEY (manager_staff_id) REFERENCES staff(staff_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_store_address FOREIGN KEY (address_id) REFERENCES address(address_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE customer
(
customer_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(45) NOT NULL,
last_name VARCHAR(45) NOT NULL,
ssn CHAR(9) NOT NULL UNIQUE,
address_id INTEGER UNSIGNED NOT NULL,
email VARCHAR(50) NOT NULL,
active TINYINT(1) NOT NULL DEFAULT '1',
create_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_customer_address FOREIGN KEY (address_id) REFERENCES address(address_id) ON DELETE RESTRICT ON UPDATE CASCADE
);


CREATE TABLE inventory
(
inventory_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
store_id INTEGER UNSIGNED NOT NULL,
film_id INTEGER UNSIGNED NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_inventory_store FOREIGN KEY (store_id) REFERENCES store(store_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_inventory_film FOREIGN KEY (film_id) REFERENCES film(film_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE replaced_inventory
(
replaced_inventory_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
store_id INTEGER UNSIGNED NOT NULL,
film_id INTEGER UNSIGNED NOT NULL,
rental_id INTEGER UNSIGNED NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_replaced_inventory_store FOREIGN KEY (store_id) REFERENCES store(store_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_replaced_inventory_film FOREIGN KEY (film_id) REFERENCES film(film_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_replaced_inventory_rental FOREIGN KEY (rental_id) REFERENCES rental(rental_id) ON DELETE RESTRICT ON UPDATE CASCADE
)

CREATE TABLE rental
(
rental_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
inventory_id INTEGER UNSIGNED NOT NULL,
rent_start_date DATETIME NOT NULL
rent_end_date DATETIME DEFAULT NULL,      # set end date max in case of film lost by the customer = '9999-12-31 23:59:59'
customer_id INTEGER UNSIGNED NOT NULL,
staff_id INTEGER UNSIGNED NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_rental_inventory FOREIGN KEY (inventory_id) REFERENCES inventory(inventory_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_rental_customer FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_rental_staff FOREIGN KEY (staff_id) REFERENCES staff(staff_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

CREATE TABLE payment
(
payment_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
customer_id INTEGER UNSIGNED NOT NULL,
staff_id INTEGER UNSIGNED NOT NULL,
rental_id INTEGER UNSIGNED NOT NULL,    # some payments are for outstanding fees and may not be directly related to a rental.
payment_type enum('RENT','SUBSCRIPTION','TERMINATION') NOT NULL,
amount DECIMAL(10, 2) NOT NULL,
payment_date DATETIME NOT NULL,
invoice_id INTEGER UNSIGNED DEFAULT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_payment_customer FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_payment_staff FOREIGN KEY (staff_id) REFERENCES staff(staff_id) ON DELETE RESTRICT ON UPDATE CASCADE,
CONSTRAINT fk_payment_rental FOREIGN KEY (rental_id) REFERENCES rental(rental_id) ON DELETE RESTRICT ON UPDATE CASCADE
);


CREATE TABLE invoice
(
invoice_id INTEGER UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
invoice_number VARCHAR(20) NOT NULL,   # usually UUID
issue_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
total_amount DECIMAL(10, 2) NOT NULL,
customer_id INTEGER UNSIGNED NOT NULL,
last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
CONSTRAINT fk_invoice_customer FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON DELETE RESTRICT ON UPDATE CASCADE
);




