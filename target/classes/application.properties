#spring.config.import=secret.properties
#spring.config.import=optional:secret.properties


# application name and description
#=================================
spring.application.name=Spring Boot Training
app.name=${spring.application.name}
app.description=${app.name} is a Spring Boot application
logging.level.com.example.springbootproject=INFO
#spring.profiles.active=@spring.profiles.active@
spring.profiles.active=local
#spring.main.banner-mode=


#Console-type application
#========================
# spring.main.web-application-type=NONE

#spring.main.web-application-type=none
#spring.main.web-environment=false


#Server Configuration
#========================
#server.ssl.key-store-type=PKCS12
# OR
#server.ssl.key-store-type=JKS

#server.ssl.key-store=classpath:keystore2.jks
#server.ssl.key-store-password=Mina1234
#server.ssl.key-alias=localhost
#server.ssl.key-password=Mina1234
#server.ssl.enabled=true
#server.port=8443
server.port=8080
#server.servlet.context-path=/home

##Time that connectors wait for another HTTP request before closing the connection. When not set, the connector?s container-specific default is used. Use a value of -1 to indicate infinite timeout.
#server.tomcat.connection-timeout=50s

##tomcat session timeout in minutes with spring security (default 30 minutes)
server.servlet.session.timeout=7d

## enable HTTP 2
server.http2.enabled=true

##Whether minSpareThreads should be started when starting the Executor or not, the default is false
#server.tomcat.prestartmin-spare-threads=true
#server.tomcat.prestart-min-spare-threads=true
##The max number of active threads in this pool, default is 200
#server.tomcat.max-threads=1000
##The minimum number of threads (idle and active) always kept alive, default is 25
#server.tomcat.min-spare-threads=50
##Maximum size of the HTTP message header.
#server.max-http-header-size=8KB
##Maximum number of connections that the server accepts and processes at any given time, default = 10,000
#server.tomcat.max-connections=100000
##Maximum queue length for incoming connection requests when all possible request processing threads are in use.
#server.tomcat.accept-count=100000
## tomcat server compression
#server.compression.enabled=true
## opt in to content types
#server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css
## not worth the CPU cycles at some point, probably
#server.compression.min-response-size=10240

server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.suffix=.log
server.tomcat.accesslog.prefix=access_log
server.tomcat.accesslog.file-date-format=.yyyy-MM-dd


server.tomcat.basedir=/home/mina/tomcat
server.tomcat.accesslog.directory=logs

## Disabling the Whitelabel Error Page
#server.error.whitelabel.enabled=false
#server.error.path=/error


# fileupload
#spring.servlet.multipart.max-file-size=1024MB
#spring.servlet.multipart.max-request-size=1024MB
#spring.servlet.multipart.enabled=true



####Jetty specific properties########
#server.jetty.acceptors= # Number of acceptor threads to use.
#server.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post or put content.
#server.jetty.selectors= # Number of selector threads to use.


#Sample server Configuration for JETTY
#server.jetty.threads.max=400
#server.jetty.threads.min=10
#server.jetty.threads.acceptors=100

# Application metrics
#========================
management.endpoints.web.exposure.include=health,info,prometheus,loggers,metrics,logfile,env,httptrace,caches,cache-manager

# to expose all actuator endpoints
#management.endpoints.web.exposure.include=*

management.endpoint.loggers.enabled=true

# In case if you are using spring security which is by default ON for actuator endpoints, you can disable it
management.security.enabled=false

management.endpoint.health.show-details=always
management.info.java.enabled=true
management.info.env.enabled=true

management.info.git.enabled=true
#management.info.git.mode=full
management.info.git.mode=simple

management.health.mail.enabled=false

# to run the actuator endpoints on different port number
#management.server.port=9997




# Spring MVC ASYNC
# request timeout in case of Reactive usage
#============================================
spring.mvc.async.request-timeout=90000
#spring.mvc.async.request-timeout=90000ms
#spring.mvc.async.request-timeout=90s
#spring.mvc.async.request-timeout=-1


# Logging Configuration
#========================
# When using starters, Logback is used for logging by default.
#disable all logging activity
#logging.level.root=OFF
#spring.main.banner-mode=off
#logging.pattern.console=
# Sets the root logging level to error
logging.level.=INFO
# OR
#logging.level.root=ERROR
#Sets the root logging level to DEBUG
#logging.level.=DEBUG
#Set logging pattern
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
# logback default config file, When a file in the classpath has one of the following names, Spring Boot will automatically load it
#    logback-spring.xml
#    logback.xml
#    logback-spring.groovy
#    logback.groovy
# Log4j2 Configuration Logging
#In order to use any logging library other than Logback, though, we need to exclude it from our dependencies.
#we need to place in the classpath a file named one of the following:
#    log4j2-spring.xml
#    log4j2.xml
#Spring boot considers either file or path property, not both.
#Writes spring.log to the specified directory. Names can be an exact location or relative to the current directory.
# will create file named spring.log (you should have written permission on this directory)
logging.file.path=/var/log/myapp/logs



#Writes to the specified log file. Names can be an exact location or relative to the current directory.
#logging.file.name=my.log
#logging.file.name=file: ${logging.file.path}/my.log
#logging.level.org.springframework.web=DEBUG
#logging.level.org.springframework.security=INFO
#logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
#logging.level.com.zaxxer.hikari=INFO
#logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
#logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE
#
#logging.level.org.springframework.transaction.interceptor=TRACE
# enable debug mode on this application
#logging.level.com.example.springbootproject=DEBUG


# Database Connection pool Configuration (Hikari = default spring db pool)
#==========================================================================
spring.datasource.jdbc-url=jdbc:mysql://localhost:3306/myapp?profileSQL=true&rewriteBatchedStatements=true
#spring.datasource.jdbc-url=jdbc:mysql://localhost:3306/myapp?rewriteBatchedStatements=true
#spring.datasource.jdbc-url=jdbc:mysql://localhost:3306/myapp?profileSQL=true
#spring.datasource.jdbc-url=jdbc:mysql://localhost:3306/myapp
#&logger=com.mysql.jdbc.log.Slf4JLogger&profileSQL=true
#spring.datasource.jdbc-url=jdbc:mysql://localhost:3306/myapp
spring.datasource.username=mina
spring.datasource.password=#Mina_1234$
spring.dataSource.cachePrepStmts=true
spring.dataSource.prepStmtCacheSize=500
spring.dataSource.prepStmtCacheSqlLimit=2048
spring.dataSource.useServerPrepStmts=true
spring.dataSource.useLocalSessionState=true
spring.dataSource.rewriteBatchedStatements=true
spring.dataSource.cacheResultSetMetadata=true
spring.dataSource.cacheServerConfiguration=true

### Optimization for batch insertion
#https://javabydeveloper.com/spring-jdbctemplate-batch-update-with-maxperformance/
#spring.datasource.hikari.data-source-properties.useConfigs=maxPerformance
spring.datasource.hikari.data-source-properties.useConfigs=maxPerformance,fullDebug
spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=true

#------------------------------------------------------------------------------------------------
#MySQL operates in AUTOCOMMIT mode by default. This means that unless you?ve explicitly
# begun a transaction, it automatically executes each query in a separate transaction.

#When we explicitly work with transactions and specify statements inside a ?START TRANSACTION?
# block then the auto-commit is turned OFF.
#spring.dataSource.elideSetAutoCommits=true
#------------------------------------------------------------------------------------------------


spring.dataSource.maintainTimeStats=false
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.minimum-idle=10


# Reactive MySQL config
spring.r2dbc.url=r2dbc:mysql://localhost:3306/myapp?profileSQL=true
spring.r2dbc.username=mina
spring.r2dbc.password=#Mina_1234$
spring.r2dbc.initialization-mode=always
#logging.level.org.springframework.data.r2dbc=DEBUG


# hibernate config
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

#spring.jpa.properties.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.ddl-auto=none

spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#required - enable selective caching mode - only entities with @Cacheable annotation will use L2 cache.
spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE
#spring.jpa.properties.javax.cache.provider=com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
#spring.jpa.properties.hibernate.generate_statistics=true

#required - turn on L2 cache.
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
#optional - turn on query cache.
#spring.jpa.properties.hibernate.cache.use_query_cache=true
#required - classpath to cache region factory.
#spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory

spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
#spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory

spring.cache.jcache.config=classpath:ehcache.xml


#spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
#spring.jpa.properties.javax.persistence.sharedCache.mode=ALL

#Hibernate Configuration (using spring-data-jpa should be prefixed with spring.jpa.properties)
#hibernate.dialect=org.hibernate.dialect.H2Dialect
#hibernate.hbm2ddl.auto=create-drop
#hibernate.ejb.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy
#hibernate.show_sql=false
#hibernate.format_sql=true

# dev config
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate=INFO
logging.level.org.hibernate.cache=DEBUG
logging.level.org.hibernate.stat=DEBUG

# prod config
#logging.level.org.hibernate=ERROR


# Flyway MySQL config
spring.flyway.enabled=true
spring.flyway.baselineOnMigrate=true
spring.flyway.check-location=true
#spring.datasource.url=jdbc:mysql://localhost:3306/test_flyway
# Flyway MySQL config
spring.flyway.url=jdbc:mysql://localhost:3306/test_flyway
spring.flyway.schemas=test_flyway
spring.flyway.user=mina
spring.flyway.password=#Mina_1234$
spring.flyway.locations=classpath:db/migration/common,classpath:db/migration/local,classpath:com/example/springbootproject/db/migration/common

# Reactive MySQL connection pool
spring.r2dbc.pool.enabled=true
spring.r2dbc.pool.initial-size=5
spring.r2dbc.pool.max-size=100
spring.r2dbc.pool.max-idle-time=30m
spring.r2dbc.pool.validation-query=SELECT 1

#logging.level.io.r2dbc.pool=DEBUG
#app.datasource.profileSQL=true


# LDAP Configuration
#=======================
spring.ldap.embedded.ldif=classpath:server.ldif
spring.ldap.embedded.base-dn=dc=springframework,dc=org
spring.ldap.embedded.port=33389


# Email Configuration
#=======================
spring.mail.protocol=smtp
spring.mail.host=smtp.mailtrap.io
spring.mail.port=587
spring.mail.username=5d8af446cdaa8e
spring.mail.password=8c954566014d92
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.properties.mail.debug=true
spring.mail.properties.mail.from=danialpoitrras1258@gmail.com


# S/MIME config
app.privatekey.keystore.name=smime.p12
app.privatekey.keystore.passwd=smime123
app.privatekey.alias=alias
app.privatekey.passwd=smime123



# SFTP Client Configuration
#=============================
#log4j.category.org.springframework.integration.sftp=TRACE
# SFTP Config
app.sftp.host=devfile.nbinformation.com
app.sftp.port=54689
app.sftp.privateKey=classpath:cert2d_rsa.crt
app.sftp.privateKeyPassphrase=!a=ho8AFI$8R
app.sftp.knownHostsFile=classpath:known_hosts
app.sftp.user=cert2d
app.sftp.destinationDir=./cert2d
app.sftp.sampleFile=classpath:CERT2D2203081709DES61U.eft


# Spring-retry Configuration
#=============================
app.retry.maxAttempts=4
app.retry.maxDelay=5000L


# WebFlux Configuration
#=============================
# web-flux wth web-mvc
#spring.main.allow-bean-definition-overriding=true
#logging.level.reactor.netty.http.client.HttpClient=DEBUG
#logging.level.org.springframework.web.socket.messaging=TRACE


# Spring Boot Client Registration configuration
#==================================================
#spring.boot.admin.client.instance.service-base-url=http://localhost:8989
#spring.boot.admin.client.url=http://localhost:8989/
#spring.boot.admin.client.instance.name=${spring.application.name}
#
#spring.boot.admin.client.username=admin
#spring.boot.admin.client.password=admin


# JWT configuration
#===================
# use StringKeyGenerator::KeyGenerators.secureRandom(16)
jwt.signing.key=31ca2b2afd4a79aa0f2ee24d8a1f30e6

jwt.accessToken.timeout=1h
jwt.refreshToken.timeout=7d

# OAuth2 Spring Security configuration
#=======================================
#spring.security.oauth2.client.registration.github.client-id=a7553955a0c534ec5e6b
#spring.security.oauth2.client.registration.github.client-secret=1795b30b425ebb79e424afa51913f1c724da0dbb

#spring.security.oauth2.client.registration.google.client-id=a7553955a0c534ec5e6b
#spring.security.oauth2.client.registration.google.client-secret=1795b30b425ebb79e424afa51913f1c724da0dbb
#
#spring.security.oauth2.client.registration.facebook.client-id=a7553955a0c534ec5e6b
#spring.security.oauth2.client.registration.facebook.client-secret=1795b30b425ebb79e424afa51913f1c724da0dbb


# global env variables
app.myproject.global=Global
app.myproject.env=Global environment


## Configure Bucket4j Rate limiting
#Reference: https://github.com/MarcGiffing/bucket4j-spring-boot-starter#refill_speed
bucket4j.enabled=true
bucket4j.filters.cache-key=getRemoteAddr()
bucket4j.filters.cache-name=rate-limit-bucket
bucket4j.filters.url=/create-order
#bucket4j.filters.url=^((?!/login).)*$
#bucket4j.filters.url=/login
bucket4j.filters.http-response-body="{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
bucket4j.filters.http-content-type=application/json
bucket4j.filters.http-status-code=TOO_MANY_REQUESTS
#bucket4j.filters.rate-limits.bandwidths.refill-speed=greedy
bucket4j.filters.rate-limits.bandwidths.refill-speed=interval
bucket4j.filters.rate-limits.bandwidths.capacity=3
bucket4j.filters.rate-limits.bandwidths.time=10
bucket4j.filters.rate-limits.bandwidths.unit=minutes


logging.level.org.apache.http=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG
logging.level.org.springframework.security.oauth2.client.OAuth2RestTemplate=DEBUG

## Google OAuth2 configuration
google.clientId=1052945576635-vv55b7jprva8ss2vs02lgdj0d4dh70u6.apps.googleusercontent.com
google.clientSecret=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
google.accessTokenUri=https://www.googleapis.com/oauth2/v3/token
google.userAuthorizationUri=https://accounts.google.com/o/oauth2/auth
google.redirectUri=http://localhost:8080/google-login
#google.redirectUri=/google-login
#google.userInfoUri=https://googleapis.com/oauth2/v3/userinfo?alt=json
google.userInfoUri=https://www.googleapis.com/oauth2/v1/userinfo?alt=json


#google.redirectUri=http://localhost:8080/sign-up-with-google
#google.issuer=accounts.google.com
#google.jwkUrl=https://www.googleapis.com/oauth2/v2/certs

#google.grant-type=authorization_code


#spring.main.web-application-type=reactive
#spring.main.allow-bean-definition-overriding=true


# pid file: default = application.pid
#spring.pid.file= my-app.pid

# swagger using OpenAPI 3.0
# to use custom path
#springdoc.api-docs.path=/api-docs
#springdoc.swagger-ui.path=/swagger-ui-custom.html
#springdoc.swagger-ui.operationsSorter=method

# firebase notification
app.firebase-configuration-file=my-spring-boot-notificat-f4f06-firebase-adminsdk-exyh1-41e0b3de4d.json





#debug=true