# JMH version: 1.33
# VM version: JDK 11.0.16, OpenJDK 64-Bit Server VM, 11.0.16+8-post-Ubuntu-0ubuntu120.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: benchmarck_jmh.AnotherBenchMarkwithParameter.heap
# Parameters: (size = 128)

# Run progress: 0.00% complete, ETA 00:09:00
# Warmup Fork: 1 of 2
# Warmup Iteration   1: 39397782.946 ops/s
# Warmup Iteration   2: 45338946.982 ops/s
# Warmup Iteration   3: 46531458.324 ops/s
Iteration   1: 45763817.806 ops/s
Iteration   2: 42798660.926 ops/s
Iteration   3: 37414008.905 ops/s

# Run progress: 11.11% complete, ETA 00:08:03
# Warmup Fork: 2 of 2
# Warmup Iteration   1: 39424700.300 ops/s
# Warmup Iteration   2: 42218487.982 ops/s
# Warmup Iteration   3: 44449714.782 ops/s
Iteration   1: 43736992.167 ops/s
Iteration   2: 45222117.521 ops/s
Iteration   3: 45107121.543 ops/s

# Run progress: 22.22% complete, ETA 00:07:02
# Fork: 1 of 1
# Warmup Iteration   1: 42201500.094 ops/s
# Warmup Iteration   2: 43871617.276 ops/s
# Warmup Iteration   3: 44553475.877 ops/s
Iteration   1: 43659519.573 ops/s
Iteration   2: 42603500.805 ops/s
Iteration   3: 41917624.247 ops/s


Result "benchmarck_jmh.AnotherBenchMarkwithParameter.heap":
  42726881.541 ±(99.9%) 16008457.962 ops/s [Average]
  (min, avg, max) = (41917624.247, 42726881.541, 43659519.573), stdev = 877477.599
  CI (99.9%): [26718423.579, 58735339.504] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.16, OpenJDK 64-Bit Server VM, 11.0.16+8-post-Ubuntu-0ubuntu120.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: benchmarck_jmh.AnotherBenchMarkwithParameter.heap
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 00:06:02
# Warmup Fork: 1 of 2
# Warmup Iteration   1: 7666894.669 ops/s
# Warmup Iteration   2: 8358900.133 ops/s
# Warmup Iteration   3: 8575896.234 ops/s
Iteration   1: 8564774.403 ops/s
Iteration   2: 8631194.804 ops/s
Iteration   3: 8595246.644 ops/s

# Run progress: 44.44% complete, ETA 00:05:01
# Warmup Fork: 2 of 2
# Warmup Iteration   1: 7899084.986 ops/s
# Warmup Iteration   2: 8290278.292 ops/s
# Warmup Iteration   3: 8378704.627 ops/s
Iteration   1: 8521190.825 ops/s
Iteration   2: 8423376.040 ops/s
Iteration   3: 8301626.875 ops/s

# Run progress: 55.56% complete, ETA 00:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 7532353.010 ops/s
# Warmup Iteration   2: 7914721.286 ops/s
# Warmup Iteration   3: 8486573.020 ops/s
Iteration   1: 8519840.212 ops/s
Iteration   2: 8162316.699 ops/s
Iteration   3: 7938274.329 ops/s


Result "benchmarck_jmh.AnotherBenchMarkwithParameter.heap":
  8206810.413 ±(99.9%) 5351337.820 ops/s [Average]
  (min, avg, max) = (7938274.329, 8206810.413, 8519840.212), stdev = 293324.883
  CI (99.9%): [2855472.593, 13558148.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.16, OpenJDK 64-Bit Server VM, 11.0.16+8-post-Ubuntu-0ubuntu120.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djava.util.concurrent.ForkJoinPool.common.parallelism=1
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: benchmarck_jmh.AnotherBenchMarkwithParameter.heap
# Parameters: (size = 16384)

# Run progress: 66.67% complete, ETA 00:03:01
# Warmup Fork: 1 of 2
# Warmup Iteration   1: 946509.395 ops/s
# Warmup Iteration   2: 1016204.505 ops/s
# Warmup Iteration   3: 889029.212 ops/s
Iteration   1: 1056473.448 ops/s
Iteration   2: 1067756.026 ops/s
Iteration   3: 1086825.143 ops/s

# Run progress: 77.78% complete, ETA 00:02:00
# Warmup Fork: 2 of 2
# Warmup Iteration   1: 993123.609 ops/s
# Warmup Iteration   2: 1046297.830 ops/s
# Warmup Iteration   3: 995709.555 ops/s
Iteration   1: 1005319.367 ops/s
Iteration   2: 988324.956 ops/s
Iteration   3: 1011042.849 ops/s

# Run progress: 88.89% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 910161.641 ops/s
# Warmup Iteration   2: 1010963.017 ops/s
# Warmup Iteration   3: 1036158.882 ops/s
Iteration   1: 1044893.585 ops/s
Iteration   2: 1030785.765 ops/s
Iteration   3: 1045917.123 ops/s


Result "benchmarck_jmh.AnotherBenchMarkwithParameter.heap":
  1040532.157 ±(99.9%) 154271.185 ops/s [Average]
  (min, avg, max) = (1030785.765, 1040532.157, 1045917.123), stdev = 8456.124
  CI (99.9%): [886260.973, 1194803.342] (assumes normal distribution)


# Run complete. Total time: 00:09:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           (size)   Mode  Cnt         Score          Error  Units
AnotherBenchMarkwithParameter.heap     128  thrpt    3  42726881.541 ± 16008457.962  ops/s
AnotherBenchMarkwithParameter.heap    1024  thrpt    3   8206810.413 ±  5351337.820  ops/s
AnotherBenchMarkwithParameter.heap   16384  thrpt    3   1040532.157 ±   154271.185  ops/s
