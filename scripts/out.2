# JMH version: 1.33
# VM version: JDK 11.0.16, OpenJDK 64-Bit Server VM, 11.0.16+8-post-Ubuntu-0ubuntu120.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: benchmarck_jmh.AnotherBenchMarkwithParameter.heap
# Parameters: (size = 128)

# Run progress: 0.00% complete, ETA 00:09:00
# Warmup Fork: 1 of 2
# Warmup Iteration   1: 39718313.456 ops/s
# Warmup Iteration   2: 43628392.836 ops/s
# Warmup Iteration   3: 43576576.133 ops/s
Iteration   1: 44580765.525 ops/s
Iteration   2: 44378633.628 ops/s
Iteration   3: 42682237.617 ops/s

# Run progress: 11.11% complete, ETA 00:08:03
# Warmup Fork: 2 of 2
# Warmup Iteration   1: 40120397.787 ops/s
# Warmup Iteration   2: 42649751.258 ops/s
# Warmup Iteration   3: 42950805.622 ops/s
Iteration   1: 44091610.026 ops/s
Iteration   2: 43683387.943 ops/s
Iteration   3: 42861007.416 ops/s

# Run progress: 22.22% complete, ETA 00:07:02
# Fork: 1 of 1
# Warmup Iteration   1: 38758898.738 ops/s
# Warmup Iteration   2: 42299404.859 ops/s
# Warmup Iteration   3: 43740766.722 ops/s
Iteration   1: 42519233.697 ops/s
Iteration   2: 41086393.521 ops/s
Iteration   3: 42623580.921 ops/s


Result "benchmarck_jmh.AnotherBenchMarkwithParameter.heap":
  42076402.713 ±(99.9%) 15670611.606 ops/s [Average]
  (min, avg, max) = (41086393.521, 42076402.713, 42623580.921), stdev = 858959.100
  CI (99.9%): [26405791.107, 57747014.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.16, OpenJDK 64-Bit Server VM, 11.0.16+8-post-Ubuntu-0ubuntu120.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: benchmarck_jmh.AnotherBenchMarkwithParameter.heap
# Parameters: (size = 1024)

# Run progress: 33.33% complete, ETA 00:06:02
# Warmup Fork: 1 of 2
# Warmup Iteration   1: 7434799.275 ops/s
# Warmup Iteration   2: 8147652.667 ops/s
# Warmup Iteration   3: 8328079.942 ops/s
Iteration   1: 8336528.936 ops/s
Iteration   2: 8308044.075 ops/s
Iteration   3: 8148558.791 ops/s

# Run progress: 44.44% complete, ETA 00:05:01
# Warmup Fork: 2 of 2
# Warmup Iteration   1: 7132673.383 ops/s
# Warmup Iteration   2: 7766347.189 ops/s
# Warmup Iteration   3: 7862065.151 ops/s
Iteration   1: 7776122.069 ops/s
Iteration   2: 8012888.846 ops/s
Iteration   3: 7779318.662 ops/s

# Run progress: 55.56% complete, ETA 00:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 7166531.826 ops/s
# Warmup Iteration   2: 8028784.298 ops/s
# Warmup Iteration   3: 8233164.674 ops/s
Iteration   1: 8180117.874 ops/s
Iteration   2: 8211241.338 ops/s
Iteration   3: 8209234.224 ops/s


Result "benchmarck_jmh.AnotherBenchMarkwithParameter.heap":
  8200197.812 ±(99.9%) 317781.386 ops/s [Average]
  (min, avg, max) = (8180117.874, 8200197.812, 8211241.338), stdev = 17418.670
  CI (99.9%): [7882416.426, 8517979.198] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 11.0.16, OpenJDK 64-Bit Server VM, 11.0.16+8-post-Ubuntu-0ubuntu120.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: benchmarck_jmh.AnotherBenchMarkwithParameter.heap
# Parameters: (size = 16384)

# Run progress: 66.67% complete, ETA 00:03:01
# Warmup Fork: 1 of 2
# Warmup Iteration   1: 938928.822 ops/s
# Warmup Iteration   2: 1041349.388 ops/s
# Warmup Iteration   3: 1034268.101 ops/s
Iteration   1: 1050187.716 ops/s
Iteration   2: 1047933.003 ops/s
Iteration   3: 1049179.724 ops/s

# Run progress: 77.78% complete, ETA 00:02:00
# Warmup Fork: 2 of 2
# Warmup Iteration   1: 932821.455 ops/s
# Warmup Iteration   2: 946418.143 ops/s
# Warmup Iteration   3: 962060.510 ops/s
Iteration   1: 924832.716 ops/s
Iteration   2: 1057142.254 ops/s
Iteration   3: 1004520.146 ops/s

# Run progress: 88.89% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 983437.578 ops/s
# Warmup Iteration   2: 1093194.408 ops/s
# Warmup Iteration   3: 1063862.243 ops/s
Iteration   1: 978303.909 ops/s
Iteration   2: 1059108.719 ops/s
Iteration   3: 1055397.639 ops/s


Result "benchmarck_jmh.AnotherBenchMarkwithParameter.heap":
  1030936.756 ±(99.9%) 832262.839 ops/s [Average]
  (min, avg, max) = (978303.909, 1030936.756, 1059108.719), stdev = 45619.135
  CI (99.9%): [198673.917, 1863199.594] (assumes normal distribution)


# Run complete. Total time: 00:09:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           (size)   Mode  Cnt         Score          Error  Units
AnotherBenchMarkwithParameter.heap     128  thrpt    3  42076402.713 ± 15670611.606  ops/s
AnotherBenchMarkwithParameter.heap    1024  thrpt    3   8200197.812 ±   317781.386  ops/s
AnotherBenchMarkwithParameter.heap   16384  thrpt    3   1030936.756 ±   832262.839  ops/s
